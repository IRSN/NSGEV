% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/NSGEV.R
\name{NSGEV}
\alias{NSGEV}
\title{Non-Stationary GEV Model}
\usage{
NSGEV(
  formulas,
  data,
  response = NULL,
  psi = NULL,
  est = c("none", "optim", "nloptr"),
  trace = 0
)
}
\arguments{
\item{formulas}{A named list with three formulas.}

\item{data}{The data frame to be used.}

\item{response}{Name of the column in \code{data} that gives the
response. If \code{NULL}, the model will not be estimated but still
can have a limited use.}

\item{psi}{Named vector of coefficients. If the model is
(re)-estimated, this vector is used a initial value for the
coefficients.}

\item{est}{Character or logical. The default is to use the parameter
values given in \code{psi}.}

\item{trace}{Integer level of verbosity.}
}
\value{
An object with class \code{"NSGEV"}
}
\description{
Non-Stationary GEV.
}
\details{
The model involves a vector \eqn{\boldsymbol{\psi}}{\psi} of
\eqn{p} parameters which are called the \emph{coefficients} of the
model. The GEV parameters \eqn{\mu} (loc), \eqn{\sigma} (scale)
and \eqn{\xi} (shape) are expressed as formulas using the
parameters in \eqn{\boldsymbol{\psi}}{\psi} and the model
variables. The three GEV parameters form a vector
\eqn{\boldsymbol{\theta}(\mathbf{x}) =
[\mu(\mathbf{x}),\,\sigma(\mathbf{x}),\,xi(\mathbf{x})]^\top}{\theta(x) = [\mu(x), \sigma(x), \xi(x)]}
which depends on the covariates hence varies across the
observations. The observations are assumed to be independent
conditional on the covariates.

Note that the GEV parameters are always assumed to be given in the
order \code{loc}, \code{scale}, \code{shape}. The data frame \code{data}
can not for now use these names for its columns.
}
\examples{
df <- data.frame(t = 1:10)

## built a model with given coefficients
psi <- c("alpha" = 1, "beta" = 0.01, "delta" = 0.6, "xi" = 0.06)
ns0 <- NSGEV(formulas = list("loc" = ~ alpha + beta * t, "scale" = ~ delta, "shape" = ~ xi),
             data = df, psi = psi)

## simulate a path
set.seed(1234)
ysim <- simulate(ns0, nsim = 1, psi = psi)
df2 <- cbind(df, y = ysim[ , 1L])
ns1 <- NSGEV(formulas = list("loc" = ~ alpha + beta * t, "scale" = ~ delta, "shape" = ~ xi),
             data = df2, response = "y", psi = psi, est = "optim")

## try an exponential link
ns2 <- NSGEV(formulas = list("loc" = ~ exp(alpha + beta * t), "scale" = ~ delta, "shape" = ~ xi),
             data = df2, response = "y", psi = psi, est = "optim")

## compare the estimation with that of ismev::gev.fit
require(ismev)
ns1.ismev <- gev.fit(xdat = df2$y, ydat = as.matrix(df), mul = 1, show = FALSE)
rbind("NSGEV" = c(ns1$estimate, "negLogL" = ns1$negLogL),
       "ismev" = c(ns1.ismev$mle, "negLogL" = ns1.ismev$nllh))

## Try an expoential link
ns2.ismev <- gev.fit(xdat = df2$y, ydat = as.matrix(df), mul = 1, mulink = exp, show = FALSE)
rbind("NSGEV" = c(ns2$estimate, "negLogL" = ns2$negLogL),
       "ismev" = c(ns2.ismev$mle, "negLogL" = ns2.ismev$nllh))
}
\seealso{
\code{\link{simulate.NSGEV}}
}
\author{
Yves Deville
}
