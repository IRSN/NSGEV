
##' Plot method for \code{NSGEV} objects.
##'
##' @title Plot method for \code{NSGEV} object
##'
##' @param x A NSGEV object
##'
##' @param y Not used.
##'
##' @param which An integer. The value \code{1} will lead to a plot
##' with the observation number used for the \eqn{x} axis. With the
##' value \code{2} the \eqn{x} axis is the covariate, assuming that
##' there is only one covariate.
##'
##' @param pLim A numeric vector with two probabilities used to set
##' the \code{ylim} parameter of \code{plot.default}. The model
##' quantiles for these probabilites are computed and added to the
##' range used to choose \code{ylim}.
##'
##' @param showQuant
##' 
##' @param ... Other arguments to be passed to methods.
##' 
##' @return Nothing.
##' 
##' @author Yves Deville
##'
##' @examples
##' example(NSGEV)
##' plot(ns1, which = 1)
##' plot(ns1, which = 2)
##' 
plot.NSGEV <- function(x, y, which = 1,
                       pLim = c(0.01, 0.99),
                       showQuant = c(0.5, 0.95, 0.99),
                       ...) {
    
    if (which == 1L) {

        n <- 60
        ysim <- simulate(x, n = n)
        
        if (!is.null(x$response)) {
            r <- range(x$response, ysim)
            ylab <- x$reponseName
            main <- "observed and simulated responses"
        }
        else {
            r <-range(x$response, ysim)
            ylab <- ""
            main <- sprintf("%d simulated responses", n)
        }
            
        matplot(ysim, type = "l", col = "gray", ylim = r,
                xlab = "obs.", ylab = ylab,
                main = main)
        
        if (!is.null(x$response)) {
            lines(x = x$response, type = "o", pch = 16)
        }
       
    } else if (which == 2L) {
        
        ## =============================================================
        ## Does it make sense with more than one predictor?
        ## XXX for the quantile function use a new dataset with a fine
        ## grid and sorted values
        ## =============================================================
        if (length(x$predNames) == 0L) {
            stop("'which = 2' is only possible when at least one ",
                 "predictor exists")
        }
        q0 <- quantile(x, probs = pLim)
        qLines <- (!is.logical(showQuant) || showQuant) && length(showQuant)
       
        if (!is.null(x$response)) {
            r <- range(x$response, q0)
            y <- x$response
            main <- "observed responses"
            ylab <- x$reponseName
        } else {
            r <-range(x$response, q0)
            y <- drop(simulate(x, n = 1))
            main <- "simulated responses"
            ylab <- x$reponseName
        }
        plot(x = x$data[ , x$predNames],  y = y, type = "p",
             ylim = r,
             pch = 21, col = "orangered", bg = "gold",
                xlab = x$predNames, main = main)
        if (qLines) {
            q <- quantile(x, probs = showQuant)
            matlines(x = x$data[ , x$predNames],  y = q, lwd = 2,
                     lty = 1:3, col = "darkgray")
        }
 

    }
        
}

